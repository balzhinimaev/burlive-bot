import express from 'express'
import { Markup, Scenes, session, Telegraf } from 'telegraf'
import dotenv from 'dotenv'
dotenv.config() // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import bodyParser from 'body-parser'
import morgan from 'morgan'
import helmet from 'helmet'
import compression from 'compression'
import { MyContext } from './types/MyContext'
import dictionaryWizard from './dictionaryWizard'
import sendOrEditMessage from './utils/sendOrEditMessage'
import subscribeWizard from './subscribe'
import { fetchUser } from './utils/fetchUser'
import { createUser } from './utils/createUser'
import logger from './utils/logger'
import dashboardWizard from './dashboard'
import { saveAction } from './utils/saveAction'
import { apiLimiter, authLimiter } from './middleware/rateLimiter'
import { errorHandler } from './middleware/errorHandler'
import { addRequestId } from './middleware/requestId'
import config from './config'

const app = express()
app.use(helmet()) // Security headers
app.use(compression()) // Response compression
// app.use(bodyParser.json())
app.use(addRequestId) // Add unique request ID
app.use(morgan('combined'))
app.use(express.json())

// Initialize Telegram bot
const bot = new Telegraf<MyContext>(config.bot.token)

// Home scene messages and keyboards
const HOME_GREETING_MESSAGE = `<b>–°–∞–º–æ—É—á–∏—Ç–µ–ª—å –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b>\n\n–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å`
const HOME_KEYBOARD = Markup.inlineKeyboard([
    [
        Markup.button.webApp('üöÄ –°–∞–º–æ—É—á–∏—Ç–µ–ª—å', config.bot.webappUrl),
        Markup.button.callback('üìò –°–ª–æ–≤–∞—Ä—å', 'dictionary-wizard'),
    ],
    [Markup.button.webApp('üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥', config.leaderboard.url)],
    [Markup.button.callback('üíé –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø', 'subcribe')],
    [Markup.button.callback('üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'dashboard-wizard')],
])

// Webhook setup function
const setWebhook = async (url: string) => {
    try {
        await bot.telegram.setWebhook(`${url}${config.bot.secretPath}`)
        console.log(`Webhook set: ${url}${config.bot.secretPath}`)
    } catch (error) {
        console.error('Error setting webhook:', error)
    }
}

// Set webhook for production mode
if (config.env === 'production') {
    const siteUrl = config.site.url || 'https://example.com'
    setWebhook(siteUrl)
}

/**
 * User registration and welcome message
 * @param ctx - Telegram context
 * @param referralCode - Optional referral code
 * @returns Promise<boolean> - Success status
 */
const registerUser = async (
    ctx: MyContext,
    referral?: string
): Promise<boolean> => {
    try {
        const userId = ctx.from?.id
        if (!userId) throw new Error('User ID not found')

        const request = await createUser(
            userId,
            ctx.from.first_name,
            referral || '',
            ctx.from.last_name,
            ctx.from.username,
            config.bot.username
        )

        // Welcome message
        let welcomeMessage: string =
            '<b>–ü—Ä–∏–≤–µ—Ç!</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —è–∑—ã–∫–æ–≤–æ–π –±–æ—Ç, –≥–¥–µ –æ–±—É—á–µ–Ω–∏–µ ‚Äì —ç—Ç–æ –∏–≥—Ä–∞:\n\n'
        welcomeMessage += '‚Ä¢ <b>–°–∞–º–æ—É—á–∏—Ç–µ–ª—å:</b> –£—á–∏—Å—å –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Å–∫—É–∫–∏.\n'
        welcomeMessage +=
            '‚Ä¢ <b>–Ø–∑—ã–∫–æ–≤–æ–π –∫–æ—Ä–ø—É—Å &amp; —Å–ª–æ–≤–∞—Ä—å:</b> –î–æ–±–∞–≤–ª—è–π –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã, –∏—â–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤.\n'
        welcomeMessage +=
            '‚Ä¢ <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, —Ä–µ–π—Ç–∏–Ω–≥–∏ &amp; –∫–æ–Ω–∫—É—Ä—Å—ã:</b> –¢–≤–æ–µ –º–Ω–µ–Ω–∏–µ —Ä–µ—à–∞–µ—Ç, –∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç—Å—è!\n\n'
        welcomeMessage +=
            '–ì–æ—Ç–æ–≤ –ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç? –ü–æ–µ—Ö–∞–ª–∏!\n\n'
        welcomeMessage +=
            '–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –≤—Å–µ –µ—â–µ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏, –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏–º, –º—ã –≤–∞–º –Ω–∞–ø–∏—à–µ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞.'

        let refIsExists: boolean = false

        // Track referral if provided
        if (request.user && referral) {
            try {
                // logger.info(referralCode)
                await fetch(`${config.api.url}/telegram/user/track-referral`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId, referral }),
                })
            } catch (error) {
                logger.error(`Error tracking referral: ${error}`)
            }
        }

        if (request.user) {
            logger.info(`User ${userId} registered!`)

            bot.telegram.sendMessage(
                config.chats.informator,
                `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>${userId}</code> –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω\n` +
                    `–†–µ—Ñ–µ—Ä–∞–ª–∫–∞: ${referral ? '<code>' + referral + '</code>' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`,
                {
                    parse_mode: 'HTML',
                }
            )
            await ctx.reply(welcomeMessage, {
                parse_mode: 'HTML',
                reply_markup: { remove_keyboard: true },
            })
            return true
        } else {
            return false
        }
    } catch (error) {
        logger.error(`Registration error: ${error}`)
        return false
    }
}

/**
 * Handle user start or entry
 * @param ctx - Telegram context
 * @returns Promise<void>
 */
const handleUserEntry = async (ctx: MyContext): Promise<void> => {
    try {
        const userId = ctx.from?.id
        // logger.info(`${userId}`)
        if (!userId) throw new Error('User ID not found')

        // Extract referral code if present
        let referralCode: string | undefined
        if (ctx.startPayload && ctx.startPayload.startsWith('ref_')) {
            referralCode = ctx.startPayload.substring(4)
        }

        const userStatus = await fetchUser(userId)

        // logger.info(`${userStatus.is_exists}`)
        if (userStatus.is_exists) {
            if (referralCode) {
                await ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ')
            }
            await ctx.scene.enter('home')
        } else {
            const success = await registerUser(ctx, referralCode)
            if (success) {
                await ctx.scene.enter('home')
            } else {
                throw new Error('Failed to register user')
            }
        }
    } catch (error) {
        // console.log(error)
        logger.error(`Entry error: ${error}`)
        const message =
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å @frntdev –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start'
        await sendOrEditMessage(
            ctx,
            message,
            Markup.inlineKeyboard([[Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]])
        )
    }
}

// Health check endpoint
app.get('/health', (req, res) => {
    res.status(200).json({
        status: 'ok',
        uptime: process.uptime(),
        timestamp: Date.now(),
    })
})

app.post('/send_message', async (req, res): Promise<void> => {

    const { source_language, target_language, user, result } = req.body

    const userId = user.id

    try {
        await bot.telegram.sendMessage(
            config.chats.vocabulary_logger,
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>${userId}</code>\n` + `burlangdb: ${result}`,
            {
                parse_mode: 'HTML',
            }
        )
        res.status(200).json({ message: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" })
        return
    } catch (error) {
        console.log(error)
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è" })
    }

    return
})

// Graceful shutdown handling
const gracefulShutdown = async () => {
    logger.info('Received shutdown signal, closing connections...')

    // Close the bot webhook
    try {
        await bot.telegram.deleteWebhook()
        logger.info('Bot webhook deleted')
    } catch (error) {
        logger.error(`Error deleting webhook: ${error}`)
    }

    // Close any database connections here
    // db.close()

    logger.info('All connections closed, shutting down')
    process.exit(0)
}

// Register shutdown handlers
process.on('SIGTERM', gracefulShutdown)
process.on('SIGINT', gracefulShutdown)

// Global error handler
app.use(errorHandler)

app.use(config.bot.secretPath, async (req, res) => {
    try {
        await bot.handleUpdate(req.body, res)
    } catch (error) {
        logger.error(`Webhook processing error: ${error}`)
    }
})

app.get('/success/:user_id', async (req, res) => {
    try {
        const { user_id } = req.params

        await bot.telegram.sendSticker(
            user_id,
            'CAACAgIAAxkBAAJO9meo05D2PXjCHlhtwBt5r7iGr9xlAAINAAOWn4wONM9_DtpaNXU2BA'
        )

        await bot.telegram.sendMessage(user_id, '–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back' }],
                ],
            },
        })

        res.status(200).json({
            message: '–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –ø–æ–¥–ø–∏—Å–∫—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
        })
    } catch (error) {
        logger.error(`Payment success handler error: ${error}`)
        res.status(500).json({ error: 'Internal server error' })
    }
})

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π (–≥–ª–∞–≤–Ω–æ–π) —Å—Ü–µ–Ω—ã
const homeScene = new Scenes.BaseScene<MyContext>('home')

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "dictionary-wizard"
homeScene.action('dictionary-wizard', async (ctx: MyContext) => {
    await ctx.scene.enter('dictionary-wizard')
})

// –°–æ–∑–¥–∞–Ω–∏–µ Stage –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞–º–∏
const stage = new Scenes.Stage<MyContext>(
    [
        homeScene,
        dictionaryWizard,
        // sentencesScene,
        dashboardWizard,
        // selfTeacherScene,
        subscribeWizard,
    ],
    {
        default: 'home',
    }
)

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ middleware —Å–µ—Å—Å–∏–π –∏ —Å—Ü–µ–Ω
bot.use(session())
bot.use(async (ctx, next) => {
    if (ctx.update.channel_post) {
        return
    }

    const userId = ctx.from?.id
    // console.log(userId)
    if (!userId) throw Error
    // logger.info(`${userId} –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞`)

    const updateType = ctx.updateType
    let message = ``
    let photo = ``
    let scene = ``
    // if (updateType === 'message') {
    //     if (ctx.update.message) {
    //         message = ctx.update.message
    //         saveAction(userId, updateType, message)
    //     }
    // }

    if (updateType === 'callback_query') {
        try {
            const userStatus = await fetchUser(userId)
            if (!userStatus.is_exists) {
                await registerUser(ctx)
                await sendOrEditMessage(
                    ctx,
                    HOME_GREETING_MESSAGE,
                    HOME_KEYBOARD,
                    true
                )
                return
            }
        } catch (error) {
            console.log(error)
            sendOrEditMessage(
                ctx,
                `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start`
            )
            logger.error(error)
            throw Error
        }

        const data: 'dashboard-wizard' | 'home-scene' | 'subscribe' =
            ctx.update.callback_query.data
        if (
            data === 'dashboard-wizard' ||
            data === 'subscribe' ||
            data === 'home-scene'
        ) {
            ctx.currentScene = data
        }
        // saveAction(userId, updateType, data)
    }

    return next()
})

bot.use(stage.middleware())

// Bot command handlers
bot.start(handleUserEntry)
homeScene.start(handleUserEntry)

homeScene.enter((ctx) => {
    sendOrEditMessage(ctx, HOME_GREETING_MESSAGE, HOME_KEYBOARD)
})
// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(config.port, () => {
    logger.info(`Server started on port ${config.port} in ${config.env} mode`)

    // Log system information
    logger.info(`Node version: ${process.version}`)
    logger.info(
        `Memory usage: ${Math.round(process.memoryUsage().rss / 1024 / 1024)} MB`
    )
})

bot.action('dictionary-wizard', async (ctx) => {
    ctx.scene.enter('dictionary-wizard')
    await ctx.answerCbQuery()
})
bot.action('subcribe', async (ctx) => {
    await ctx.scene.enter('subscribe-wizard')
})
bot.action('dashboard-wizard', async (ctx) => {
    await ctx.scene.enter('dashboard-wizard')
})
// Handle other actions (fallback)
homeScene.action(/^.*$/, async (ctx) => {
    try {
        const userId = ctx.from?.id

        if (ctx.from?.is_bot || !userId) {
            throw new Error('Invalid user or bot')
        }

        const userStatus = await fetchUser(userId)

        if (userStatus.is_exists) {
            await sendOrEditMessage(ctx, HOME_GREETING_MESSAGE, HOME_KEYBOARD)
            ctx.answerCbQuery()
            return
        } else {
            // Clean up old messages
            if (ctx.update.callback_query.message?.message_id) {
                for (let i = ctx.update.callback_query.message.message_id; i !== 0; i--) {
                    await ctx.deleteMessage(i).catch(error => {
                        console.log(`Failed to delete message ${i}: ${error}`)
                    })
                    logger.info(`Message ${i} deleted`)
                }
            }

            const success = await registerUser(ctx)
            if (success) {
                await sendOrEditMessage(ctx, HOME_GREETING_MESSAGE, HOME_KEYBOARD, true)
            } else {
                logger.error('Error in action handler during user registration')
                throw new Error('Failed to register user')
            }
        }
    } catch (error) {
        logger.error(`Action handler error: ${error}`)
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
    }
})

// homeScene.on('message', async (ctx) => {
// console.log(ctx.update.message)
// // ctx.telegram.sendSticker()
// })
