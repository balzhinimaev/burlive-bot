import express from 'express'
import { Markup, Scenes, session, Telegraf } from 'telegraf'
import dotenv from 'dotenv'
dotenv.config() // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import bodyParser from 'body-parser'
import morgan from 'morgan'
import { MyContext } from './types/MyContext'
import dictionaryWizard from './dictionaryWizard'
import sendOrEditMessage from './utils/sendOrEditMessage'
import subscribeWizard from './subscribe'
import { fetchUser } from './utils/fetchUser'
import { createUser } from './utils/createUser'
import logger from './utils/logger'
import dashboardWizard from './dashboard'
import { saveAction } from './utils/saveAction'
import { error } from 'console'

const app = express()
const botusername = process.env.botusername
app.use(bodyParser.json())
app.use(morgan('dev'))

const port = process.env.PORT || 1442
const mode = process.env.mode || 'development'
const secretPath = `/${process.env.secret_path}` || ''
const bot = new Telegraf<MyContext>(process.env.bot || '')
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
const setWebhook = async (url: string) => {
    try {
        // await bot.telegram.deleteWebhook()
        await bot.telegram.setWebhook(`${url}${secretPath}`)
        console.log(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${url}${secretPath}`)
        // const info = await bot.telegram.getWebhookInfo()
        // console.log(info)
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞:', error)
    }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
// if (mode === 'development') {
    // const fetchNgrokUrl = async () => {
        // try {
            // const res = await fetch('http://127.0.0.1:4040/api/tunnels')
            // const json: any = await res.json()
            // const secureTunnel = json.tunnels[0].public_url
            // console.log(`Ngrok URL: ${secureTunnel}`)
            // await setWebhook(secureTunnel)
        // } catch (error) {
            // console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –∏–∑ ngrok:', error)
        // }
    // }
    // fetchNgrokUrl()
// } else 

if (mode === 'production') {
    const siteUrl = process.env.site_url || 'https://example.com'
    setWebhook(`${siteUrl}`)
}

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
app.use(express.json())
app.use('/hello', async (req, res) => {
    res.status(200).json({ message: 'hello' })
    return
})
app.use(`${secretPath}`, async (req, res) => {
    try {
        console.log(`${secretPath}`)
        await bot.handleUpdate(req.body, res)
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞\n ${error}`)
    }
})
app.get(`/success/:user_id`, async (req, res) => {
    const { user_id } = req.params
    console.log(user_id)
    await bot.telegram.sendSticker(
        user_id,
        'CAACAgIAAxkBAAJO9meo05D2PXjCHlhtwBt5r7iGr9xlAAINAAOWn4wONM9_DtpaNXU2BA'
    )
    await bot.telegram.sendMessage(user_id, '–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂', {
        reply_markup: {
            inline_keyboard: [[{ text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back' }]],
        },
    })
    res.status(200).json({
        message: '–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –ø–æ–¥–ø–∏—Å–∫—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
    })
    return
})

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π (–≥–ª–∞–≤–Ω–æ–π) —Å—Ü–µ–Ω—ã
const homeScene = new Scenes.BaseScene<MyContext>('home')
const webapp_url = process.env.webapp_url

if (!webapp_url) {
    throw 'webappurl not setted'
}

const homeKeyboard = Markup.inlineKeyboard([
    [
        Markup.button.webApp('üöÄ –°–∞–º–æ—É—á–∏—Ç–µ–ª—å', webapp_url), // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        Markup.button.callback('üìò –°–ª–æ–≤–∞—Ä—å', 'dictionary-wizard'),
    ],
    [Markup.button.webApp('üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥', 'https://anoname.xyz/leaderboard')],
    [Markup.button.callback('üíé –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø', 'subcribe')],
    [Markup.button.callback('üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', 'dashboard-wizard')],
])
const homeGreetingMessage = `<b>–°–∞–º–æ—É—á–∏—Ç–µ–ª—å –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b>\n\n–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å`
homeScene.enter((ctx) => {
    // console.log(`–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É Home`)
    sendOrEditMessage(ctx, homeGreetingMessage, homeKeyboard)
})
homeScene.start((ctx) => {
    sendOrEditMessage(ctx, homeGreetingMessage, homeKeyboard)
})
// homeScene.leave(async (ctx) => {
//     // console.log(`–í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω Home`)
// })
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "dictionary-wizard"
homeScene.action('dictionary-wizard', async (ctx: MyContext) => {
    await ctx.scene.enter('dictionary-wizard')
})
homeScene.on('message', async (ctx: any) => {
    if (ctx.update.message) {
        if (ctx.update.message.text) {
            const message: string = ctx.update.message.text
            if (message === '–ü–æ–µ—Ö–∞–ª–∏') {
            }
        }
    }
})
// –°–æ–∑–¥–∞–Ω–∏–µ Stage –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞–º–∏
const stage = new Scenes.Stage<MyContext>(
    [
        homeScene,
        dictionaryWizard,
        // sentencesScene,
        dashboardWizard,
        // selfTeacherScene,
        subscribeWizard,
    ],
    {
        ttl: 300,
    }
)

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ middleware —Å–µ—Å—Å–∏–π –∏ —Å—Ü–µ–Ω
bot.use(session())
bot.use((ctx, next) => {
    const userId = ctx.from?.id
    if (!userId) throw Error
    // logger.info(`${userId} –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞`)

    const updateType = ctx.updateType
    let message = ``
    let photo = ``
    let scene = ``
    if (updateType === 'message') {
        if (ctx.update.message) {
            message = ctx.update.message
            saveAction(userId, updateType, message)
        }
    }

    if (updateType === 'callback_query') {
        const data: 'dashboard-wizard' | 'home-scene' | 'subscribe' =
            ctx.update.callback_query.data
        if (
            data === 'dashboard-wizard' ||
            data === 'subscribe' ||
            data === 'home-scene'
        ) {
            ctx.currentScene = data
        }
        saveAction(userId, updateType, data)
    }

    return next()
})
bot.use(stage.middleware())

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port} –≤ —Ä–µ–∂–∏–º–µ ${mode}`)
})

bot.start(async (ctx: MyContext) => {
    try {
        const userId = ctx.from?.id
        if (!userId) throw Error

        let referralCode: any
        if (ctx.startPayload) {
            const startParameter = ctx.startPayload
            if (startParameter && startParameter.startsWith('ref_')) {
                referralCode = startParameter.substring(4) // Remove 'ref_' prefix
            }
        }

        console.log(referralCode)

        const userStatus = await fetchUser(userId)
        // console.log(userStatus)
        if (userStatus.is_exists) {
            if (referralCode) {
                ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ')
            }
            ctx.scene.enter('home')
        } else {
            const request = await createUser(
                userId,
                ctx.from.first_name,
                referralCode,
                ctx.from.last_name,
                ctx.from.username,
                botusername
            )
            let welcomeMessage: string =
                '<b>–ü—Ä–∏–≤–µ—Ç!</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —è–∑—ã–∫–æ–≤–æ–π –±–æ—Ç, –≥–¥–µ –æ–±—É—á–µ–Ω–∏–µ ‚Äì —ç—Ç–æ –∏–≥—Ä–∞:\n'
            welcomeMessage += '\n'
            welcomeMessage += '‚Ä¢ <b>–°–∞–º–æ—É—á–∏—Ç–µ–ª—å:</b> –£—á–∏—Å—å –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Å–∫—É–∫–∏.\n'
            welcomeMessage +=
                '‚Ä¢ <b>–Ø–∑—ã–∫–æ–≤–æ–π –∫–æ—Ä–ø—É—Å &amp; —Å–ª–æ–≤–∞—Ä—å:</b> –î–æ–±–∞–≤–ª—è–π –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã, –∏—â–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤.\n'
            welcomeMessage +=
                '‚Ä¢ <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, —Ä–µ–π—Ç–∏–Ω–≥–∏ &amp; –∫–æ–Ω–∫—É—Ä—Å—ã:</b> –¢–≤–æ–µ –º–Ω–µ–Ω–∏–µ —Ä–µ—à–∞–µ—Ç, –∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç—Å—è!\n'
            welcomeMessage += '\n'
            welcomeMessage +=
                '–ì–æ—Ç–æ–≤ –ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç? –ü–æ–µ—Ö–∞–ª–∏!\n\n'
            welcomeMessage += `–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –≤—Å–µ –µ—â–µ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏, –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏–º, –º—ã –≤–∞–º –Ω–∞–ø–∏—à–µ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞.`

            if (request.user && referralCode) {
                // Track referral
                try {
                    await fetch(
                        `${process.env.api_url}/telegram/user/track-referral`,
                        {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                userId,
                                referralCode,
                            }),
                        }
                    )
                } catch (error) {
                    logger.error(`Error tracking referral: ${error}`)
                }
            }

            if (request.user) {
                logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`)
                await ctx.reply(welcomeMessage, {
                    parse_mode: 'HTML',
                    reply_markup: { remove_keyboard: true },
                })
                ctx.scene.enter('home')
            } else {
                throw Error
            }
        }
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞`)
        const message = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å @frntdev –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start`
        await sendOrEditMessage(
            ctx,
            message,
            Markup.inlineKeyboard([[Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]])
        )
    }
})
homeScene.start(async (ctx: MyContext) => {
    try {
        const userId = ctx.from?.id
        if (!userId) throw Error

        let referralCode: any
        if (ctx.startPayload) {
            const startParameter = ctx.startPayload
            if (startParameter && startParameter.startsWith('ref_')) {
                referralCode = startParameter.substring(4) // Remove 'ref_' prefix
            }
        }

        console.log(referralCode)

        const userStatus = await fetchUser(userId)
        // console.log(userStatus)
        if (userStatus.is_exists) {
            if (referralCode) {
                ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ')
            }
            ctx.scene.enter('home')
        } else {
            const request = await createUser(
                userId,
                referralCode,
                ctx.from.first_name,
                ctx.from.last_name,
                ctx.from.username,
                botusername
            )
            let welcomeMessage: string =
                '<b>–ü—Ä–∏–≤–µ—Ç!</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —è–∑—ã–∫–æ–≤–æ–π –±–æ—Ç, –≥–¥–µ –æ–±—É—á–µ–Ω–∏–µ ‚Äì —ç—Ç–æ –∏–≥—Ä–∞:\n'
            welcomeMessage += '\n'
            welcomeMessage += '‚Ä¢ <b>–°–∞–º–æ—É—á–∏—Ç–µ–ª—å:</b> –£—á–∏—Å—å –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Å–∫—É–∫–∏.\n'
            welcomeMessage +=
                '‚Ä¢ <b>–Ø–∑—ã–∫–æ–≤–æ–π –∫–æ—Ä–ø—É—Å &amp; —Å–ª–æ–≤–∞—Ä—å:</b> –î–æ–±–∞–≤–ª—è–π –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã, –∏—â–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤.\n'
            welcomeMessage +=
                '‚Ä¢ <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, —Ä–µ–π—Ç–∏–Ω–≥–∏ &amp; –∫–æ–Ω–∫—É—Ä—Å—ã:</b> –¢–≤–æ–µ –º–Ω–µ–Ω–∏–µ —Ä–µ—à–∞–µ—Ç, –∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç—Å—è!\n'
            welcomeMessage += '\n'
            welcomeMessage +=
                '–ì–æ—Ç–æ–≤ –ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç? –ü–æ–µ—Ö–∞–ª–∏!\n\n'
            welcomeMessage += `–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –≤—Å–µ –µ—â–µ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏, –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏–º, –º—ã –≤–∞–º –Ω–∞–ø–∏—à–µ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞.`

            if (request.user && referralCode) {
                // Track referral
                try {
                    await fetch(
                        `${process.env.api_url}/telegram/user/track-referral`,
                        {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                userId,
                                referralCode,
                            }),
                        }
                    )
                } catch (error) {
                    logger.error(`Error tracking referral: ${error}`)
                }
            }

            if (request.user) {
                logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`)
                await ctx.reply(welcomeMessage, {
                    parse_mode: 'HTML',
                    reply_markup: { remove_keyboard: true },
                })
                ctx.scene.enter('home')
            } else {
                throw Error
            }
        }
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞`)
        const message = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å @frntdev –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start`
        await sendOrEditMessage(
            ctx,
            message,
            Markup.inlineKeyboard([[Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]])
        )
    }
})

bot.action('dictionary-wizard', async (ctx) => {
    ctx.scene.enter('dictionary-wizard')
    await ctx.answerCbQuery()
})
bot.action('subcribe', async (ctx) => {
    await ctx.scene.enter('subscribe-wizard')
})
bot.action('dashboard-wizard', async (ctx) => {
    await ctx.scene.enter('dashboard-wizard')
})
bot.action(/^.*$/, async (ctx) => {
    const userId = ctx.from?.id
    if (!userId) throw Error
    const userStatus = await fetchUser(userId)
    if (userStatus.is_exists) {
        await sendOrEditMessage(ctx, homeGreetingMessage, homeKeyboard)
        ctx.answerCbQuery()
        return
    } else {
        if (ctx.update.callback_query.message?.message_id) {
            for (
                let i = ctx.update.callback_query.message?.message_id;
                i !== 0;
                i--
            ) {
                await ctx.deleteMessage(i).catch(error => {
                    console.log(error)
                })
                logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ ${i} —É–¥–∞–ª–µ–Ω–æ`)
            }
        }

        const request = await createUser(
            userId,
            '',
            ctx.from.first_name,
            ctx.from.last_name,
            ctx.from.username,
            botusername
        )
        let welcomeMessage: string =
            '<b>–ü—Ä–∏–≤–µ—Ç!</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —è–∑—ã–∫–æ–≤–æ–π –±–æ—Ç, –≥–¥–µ –æ–±—É—á–µ–Ω–∏–µ ‚Äì —ç—Ç–æ –∏–≥—Ä–∞:\n'
        welcomeMessage += '\n'
        welcomeMessage += '‚Ä¢ <b>–°–∞–º–æ—É—á–∏—Ç–µ–ª—å:</b> –£—á–∏—Å—å –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Å–∫—É–∫–∏.\n'
        welcomeMessage +=
            '‚Ä¢ <b>–Ø–∑—ã–∫–æ–≤–æ–π –∫–æ—Ä–ø—É—Å &amp; —Å–ª–æ–≤–∞—Ä—å:</b> –î–æ–±–∞–≤–ª—è–π –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã, –∏—â–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤.\n'
        welcomeMessage +=
            '‚Ä¢ <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, —Ä–µ–π—Ç–∏–Ω–≥–∏ &amp; –∫–æ–Ω–∫—É—Ä—Å—ã:</b> –¢–≤–æ–µ –º–Ω–µ–Ω–∏–µ —Ä–µ—à–∞–µ—Ç, –∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç—Å—è!\n'
        welcomeMessage += '\n'
        welcomeMessage +=
            '–ì–æ—Ç–æ–≤ –ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç? –ü–æ–µ—Ö–∞–ª–∏!\n\n'
        welcomeMessage += `–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –≤—Å–µ –µ—â–µ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏, –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏–º, –º—ã –≤–∞–º –Ω–∞–ø–∏—à–µ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞.`

        // if (request.user && referralCode) {
        //     // Track referral
        //     try {
        //         await fetch(
        //             `${process.env.api_url}/telegram/user/track-referral`,
        //             {
        //                 method: 'POST',
        //                 headers: {
        //                     'Content-Type': 'application/json',
        //                 },
        //                 body: JSON.stringify({
        //                     userId,
        //                     referralCode,
        //                 }),
        //             }
        //         )
        //     } catch (error) {
        //         logger.error(`Error tracking referral: ${error}`)
        //     }
        // }

        if (request.user) {
            logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`)
            await ctx.reply(welcomeMessage, {
                parse_mode: 'HTML',
                reply_markup: { remove_keyboard: true },
            })
            sendOrEditMessage(ctx, homeGreetingMessage, homeKeyboard, true)
            return
        } else {
            logger.error('–û—à–∏–±–∫–∞ –≤ index.ts –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫')
            throw Error
        }
    }
})

// bot.on('message', async (ctx) => {
// console.log(ctx.update.message)
// ctx.telegram.sendSticker()
// })
