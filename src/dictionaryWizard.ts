import { Composer, Scenes, Markup } from 'telegraf'
import sendOrEditMessage from './utils/sendOrEditMessage'
import { MyContext } from './types/MyContext'
interface ILevel {
    name: string
    icon: string
    minRating: number
    maxRating?: number // undefined –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    createdAt: Date
    updatedAt: Date
    _id: string
}

interface TelegramUser {
    _id: string
    id: number
    username?: string
    rating: number
    referrals_telegram?: string[]
    createdAt: Date
    updatedAt: Date
    email: string
    c_username: string
    theme: 'light' | 'dark'
    level: string | ILevel
    vocabular: {
        selected_language_for_translate: 'russian' | 'buryat'
    }
    platform: string
    via_app: boolean
    photo_url: string
    phone?: string | number
    role: 'admin' | 'user' | 'moderator' | undefined
    subscription: {
        type: 'monthly' | 'quarterly' | 'annual' | null
        startDate: Date | null
        endDate: Date | null
        isActive: boolean
        paymentId: string
    }
}

interface IWordModelTranslation {
    _id: string;
    text: string;
    normalized_text: string;
}

interface IWordModel {
    _id: string
    text: string
    normalized_text: string // –ù–æ–≤—ã–π –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    language: string
    author: any
    contributors: string[]
    translations: IWordModelTranslation[]
    translations_u: any[]
    createdAt: Date
    updatedAt: Date
    dialect?: string
    themes?: []
    // Additional fields, if needed
}

// –û–ø–∏—Å—ã–≤–∞–µ–º —Ç–∏–ø –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Wizard-—Å—Ü–µ–Ω—ã
interface WizardState {
    language?: string // target_langauge
    suggestion?: boolean
    selectedWordId?: string // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è _id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    selectedDialect?: string
    normalized_text?: string
}

// –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —è–∑—ã–∫–æ–≤ –∏ –¥–∏–∞–ª–µ–∫—Ç–æ–≤ —Å –∏–Ω–¥–µ–∫—Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π
const languageNames: { [key: string]: string } = {
    russian: '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
    buryat: '–ë—É—Ä—è—Ç—Å–∫–∏–π —è–∑—ã–∫',
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
}

const dialectNames: { [key: string]: string } = {
    khori: '–•–æ—Ä–∏–Ω—Å–∫–∏–π –¥–∏–∞–ª–µ–∫—Ç',
    bulagat: '–ë—É–ª–∞–≥–∞—Ç—Å–∫–∏–π –¥–∏–∞–ª–µ–∫—Ç',
    sartul: '–°–∞—Ä—Ç—É–ª—å—Å–∫–∏–π –¥–∏–∞–ª–µ–∫—Ç',
    unknown: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∏–∞–ª–µ–∫—Ç',
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∏–∞–ª–µ–∫—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
}

// –ú–∞—Å—Å–∏–≤ –±—É—Ä—è—Ç—Å–∫–∏—Ö –¥–∏–∞–ª–µ–∫—Ç–æ–≤
const dialects = [
    { value: 'khori', label: '–•–æ—Ä–∏–Ω—Å–∫–∏–π' },
    { value: 'bulagat', label: '–ë—É–ª–∞–≥–∞—Ç—Å–∫–∏–π' },
    { value: 'sartul', label: '–°–∞—Ä—Ç—É–ª—å—Å–∫–∏–π' },
    { value: 'unknown', label: '–ù–µ –∑–Ω–∞—é' },
]

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ POST-–∑–∞–ø—Ä–æ—Å–∞
async function postRequest(url: string, body: object, token: string) {
    return fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(body),
    })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
async function createResultMessage(
    words: IWordModel[],
    total_count: number,
    page: number,
    limit: number
) {
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    const totalPages = Math.ceil(total_count / limit)

    let resultMessage = `<b>–°–ª–æ–≤–∞—Ä—å ‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ‚úçÔ∏è</b>\n\n`
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    resultMessage += `<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}/${totalPages}</b>\n`
    resultMessage += `<i>–ü–æ–∫–∞–∑–∞–Ω–æ  ${page * limit - limit + 1}-${Math.min(
        page * limit,
        total_count
    )} –∏–∑ ${total_count} —Å–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥</i>\n\n`

    words.forEach((word, index) => {
        const languageFullName = languageNames[word.language] || word.language
        const dialectFullName = word.dialect
            ? dialectNames[word.dialect] || word.dialect
            : ''

        // –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ —Ä–∞–≤–µ–Ω 10, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞
        const indexStr = index + 1 === 10 ? `${index + 1}. ` : `${index + 1}.  `

        resultMessage += `${indexStr}${word.text} ‚Äì <i>${languageFullName}${
            dialectFullName ? `, ${dialectFullName}` : ''
        }</i>\n`
    })

    resultMessage += `\n<i><b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–µ—Ä–µ–≤–æ–¥</b></i>`

    return resultMessage
}

interface WordsOnApprovalResponse {
    words: IWordModel[]
    total_count: number
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function fetchWordsOnApproval(
    ctx: MyContext,
    page = 1,
    limit = 10,
    reply = false
) {
    try {
        const apiUrl = process.env.api_url
        const response = await fetch(
            `${apiUrl}/vocabulary/approval?page=${page}&limit=${limit}`,
            {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${process.env.admintoken}`,
                    'Content-Type': 'application/json',
                },
            }
        )

        if (response.ok) {
            const data = (await response.json()) as WordsOnApprovalResponse
            const { words, total_count } = data

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            const resultMessage = await createResultMessage(
                words,
                total_count,
                page,
                limit
            )

            const selectionButtons = [
                words
                    .slice(0, 5)
                    .map((_word: IWordModel, index: number) =>
                        Markup.button.callback(
                            `${index + 1}`,
                            `select_word_${index}`
                        )
                    ),
                words
                    .slice(5, 10)
                    .map((_word: IWordModel, index: number) =>
                        Markup.button.callback(
                            `${index + 6}`,
                            `select_word_${index + 5}`
                        )
                    ),
            ]

            const paginationButtons = [
                Markup.button.callback('‚¨ÖÔ∏è', 'prev_page'),
                Markup.button.callback('–ù–∞–∑–∞–¥', 'back'),
                Markup.button.callback('‚û°Ô∏è', 'next_page'),
            ]

            const selectionKeyboard = Markup.inlineKeyboard([
                ...selectionButtons,
                paginationButtons,
            ])
            ctx.session.page = page

            await sendOrEditMessage(
                ctx,
                resultMessage,
                selectionKeyboard,
                reply
            )
            ctx.wizard.selectStep(3)
        } else {
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.')
        }
    } catch (error) {
        console.error(error)
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ.')
    }
}

interface ResponseData {
    burlangdb: string
    burlivedb: any
}

// –°—Ü–µ–Ω–∞ "–°–ª–æ–≤–∞—Ä—å"
const dictionaryWizard = new Scenes.WizardScene<
    MyContext & { wizard: { state: WizardState } }
>(
    'dictionary-wizard',
    new Composer<MyContext>(),

    // –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥
    async (ctx) => {
        if (ctx.message && 'text' in ctx.message) {
            const userInput = ctx.message.text
            const language = ctx.wizard.state.language
            console.log(language)
            if (userInput === `/exit`) {
                return await render_select_language_section(ctx, true)
            }

            try {
                const apiUrl = process.env.api_url
                const adminToken = process.env.admintoken || ''

                const requestBody = {
                    userInput: userInput,
                    sourceLanguage: language,
                    targetLanguage:
                        language === 'russian' ? 'buryat' : 'russian',
                    telegramUserId: ctx.from?.id,
                }

                const response = await postRequest(
                    `${apiUrl}/vocabulary/translate`,
                    requestBody,
                    adminToken
                )

                if (response.ok) {
                    const result = (await response.json()) as ResponseData
                    console.log(result)
                    let burlive_translate = ``
                    if (result.burlivedb) {
                        for (let i = 0; i < result.burlivedb.length; i++) {
                            if (result.burlivedb.length - 1 === i) {
                                burlive_translate += `${result.burlivedb[i].text}`
                            } else {
                                burlive_translate += `${result.burlivedb[i].text}, `
                            }
                        }
                    }

                    if (result.burlivedb) {
                        console.log(result.burlivedb.translations)
                    }

                    const message_header = `<b>–°–ª–æ–≤–∞—Ä—å ‚Äî –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ üîé</b>\n\n`
                    const message_footer = `-------------------------\n| <b>burlive</b>: ${burlive_translate}\n`

                    const message_super_footer = `-------------------------\n| <b>burlang api:</b> ${result.burlangdb}\n-------------------------\n\n`
                    await ctx.reply(
                        `${message_header}${message_footer}${message_super_footer}`,
                        {
                            parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [
                                    [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')],
                                ],
                            },
                        }
                    )
                } else {
                    const errorMsg = await response.text()
                    await ctx.reply(
                        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ${errorMsg}`
                    )
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error)
                await ctx.reply(
                    '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.'
                )
            }

            // if (language) {
            //   await ctx.reply(
            //     `–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è "${userInput}" —Å ${language}: ${userInput}`
            //   );
            // } else {
            //   await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.");
            // }

            // ctx.scene.enter("dictionary-wizard"); // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ü–µ–Ω–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        } else {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.')
        }
    },

    // –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ API
    async (ctx) => {
        if (ctx.message && 'text' in ctx.message) {
            const userInput = ctx.message.text
            const language = ctx.wizard.state.language || '–Ω–µ —É–∫–∞–∑–∞–Ω'

            if (ctx.from) {
                const userId = ctx.from.id
                if (userInput) {
                    try {
                        const apiUrl = process.env.api_url
                        const adminToken = process.env.admintoken || ''

                        const requestBody = {
                            text: userInput,
                            language:
                                language === 'russian' ? 'russian' : 'buryat',
                            telegram_user_id: userId,
                            dialect:
                                ctx.wizard.state.selectedDialect || 'khori',
                        }

                        const response = await postRequest(
                            `${apiUrl}/vocabulary/suggest-words`,
                            requestBody,
                            adminToken
                        )

                        if (response.ok) {
                            await ctx.reply(
                                `–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${userInput}`
                            )
                        } else {
                            const errorMsg = await response.text()
                            await ctx.reply(
                                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ${errorMsg}`
                            )
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error)
                        await ctx.reply(
                            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.'
                        )
                    }

                    ctx.scene.enter('dictionary-wizard') // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ü–µ–Ω–µ
                }
            } else {
                await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
            }
        } else {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.')
        }
    },

    // –®–∞–≥ 3: –ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback_query)
    async (ctx) => {
        if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
            const action = ctx.callbackQuery.data

            if (action === 'approve_word' || action === 'reject_word') {
                const wordId = ctx.wizard.state.selectedWordId
                const userId = ctx.from?.id

                if (!wordId || !userId) {
                    await ctx.reply(
                        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–ª–æ–≤–æ.'
                    )
                    return
                }

                const apiUrl = process.env.api_url
                const actionUrl =
                    action === 'approve_word'
                        ? `${apiUrl}/vocabulary/accept-suggested-word`
                        : `${apiUrl}/vocabulary/decline-suggested-word`

                const response = await postRequest(
                    actionUrl,
                    { suggestedWordId: wordId, telegram_user_id: userId },
                    process.env.admintoken!
                )
                if (!response.ok) {
                    let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.'
                    try {
                        const errorData = await response.json()

                        if (
                            typeof errorData === 'object' &&
                            errorData !== null &&
                            'message' in errorData
                        ) {
                            errorMessage = (errorData as { message: string })
                                .message
                        }
                    } catch (e) {
                        // –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    }
                    await ctx.reply(`–û—à–∏–±–∫–∞: ${errorMessage}`)
                }
            } else if (action === 'skip_word') {
                await ctx.reply('–°–ª–æ–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ.')
                ctx.scene.enter('dictionary-wizard')
            }

            await ctx.answerCbQuery()
        }
    },

    // –®–∞–≥ 4: –°–µ–∫—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
    async (ctx) => {
        if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
            const action = ctx.callbackQuery.data

            if (action === 'back') {
            }
        }
    },

    // –®–∞–≥ 5: –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ç–µ–º –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã
    async (ctx) => {
        if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
            const action = ctx.callbackQuery.data

            if (action === 'russian' || action === "buryat") {
                console.log(action)
            }

            ctx.answerCbQuery()
        }
    }
    
)

interface getConfirmedWordResponse {
    message: string
    word: IWordModel
}

interface getAllWordsPaginatedResponse {
    message: string
    words: IWordModel[]
    totalWords: number
    currentPage: number
    totalPages: number
}

// –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
dictionaryWizard.use(async (ctx, next) => {
    if (ctx.wizard.cursor === 4) {
        if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
            const callbackData = (ctx.callbackQuery as any).data

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ª–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è _id
            if (callbackData.startsWith('select_word_')) {
                const selectedWordId = callbackData.split('_').pop() // –ò–∑–≤–ª–µ–∫–∞–µ–º _id —Å–ª–æ–≤–∞
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º _id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                ctx.wizard.state.selectedWordId = selectedWordId

                try {
                    // –ó–∞–ø—Ä–æ—Å –Ω–∞ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ
                    const apiUrl = process.env.api_url
                    const response = await fetch(
                        `${apiUrl}/vocabulary/confirmed-word?wordId=${selectedWordId}`,
                        {
                            method: 'GET',
                            headers: {
                                Authorization: `Bearer ${process.env.admintoken}`,
                                'Content-Type': 'application/json',
                            },
                        }
                    )
                    const data =
                        (await response.json()) as getConfirmedWordResponse

                    if (response.ok) {
                        const word = data.word // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ–≤–µ

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–π—Ç—ã –≤ wizard
                        ctx.wizard.state.selectedWordId = selectedWordId
                        ctx.wizard.state.language =
                            word.language.toLowerCase() === 'russian' ||
                            word.language.toLowerCase() === '—Ä—É—Å—Å–∫–∏–π'
                                ? 'russian'
                                : 'buryat' // –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
                        ctx.wizard.state.selectedDialect =
                            ctx.wizard.state.selectedDialect || 'khori' // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ª–µ–∫—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        ctx.wizard.state.normalized_text =
                            word.normalized_text || '' // –û–±–Ω–æ–≤–ª—è–µ–º normalized_text, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å

                        let dialectLabeled
                        if (ctx.wizard.state.language === 'buryat') {
                            if (word.dialect === 'khori') {
                                dialectLabeled = '<b>–•–æ—Ä–∏–Ω—Å–∫–∏–π</b>'
                            }
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —è–∑—ã–∫ —Å–ª–æ–≤–∞ –Ω–µ "—Ä—É—Å—Å–∫–∏–π" –∏–ª–∏ "russian", –≤—ã–≤–æ–¥–∏–º –¥–∏–∞–ª–µ–∫—Ç
                        const dialectInfo =
                            ctx.wizard.state.language === 'buryat'
                                ? `\n–î–∏–∞–ª–µ–∫—Ç: ${dialectLabeled || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`
                                : ''

                        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        let wordDetails = `<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ ‚úçÔ∏è</b>\n\n–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <b>${
                            word.text
                        }</b>\n–Ø–∑—ã–∫: ${
                            word.language === 'buryat'
                                ? '<b>–ë—É—Ä—è—Ç—Å–∫–∏–π</b>'
                                : '<b>–†—É—Å—Å–∫–∏–π</b>'
                        }${dialectInfo}`

                        if (word.translations_u.length) {
                            wordDetails += `\n\n<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã </b>\n–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: `
                            for (
                                let i = 0;
                                i < word.translations_u.length;
                                i++
                            ) {
                                const translation = word.translations_u[i]
                                wordDetails += `${translation.text}`
                                if (i < word.translations_u.length - 1) {
                                    wordDetails += ', '
                                }
                            }
                        }
                        let sendmessage
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
                        let keyboard
                        console.log(ctx.wizard.state.language)
                        if (ctx.wizard.state.language !== 'buryat') {
                            // –î–ª—è –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏–∞–ª–µ–∫—Ç–∞–º–∏
                            const selectedDialect =
                                ctx.wizard.state.selectedDialect ||
                                dialects[0].value
                            const dialectButtons = dialects.map((dialect) =>
                                Markup.button.callback(
                                    `${selectedDialect === dialect.value ? '‚úÖ ' : ''}${
                                        dialect.label
                                    }`,
                                    `select_dialect_for_suggest_translate_"${dialect.value}`
                                )
                            )

                            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
                            const groupedDialectButtons: any = []
                            for (let i = 0; i < dialectButtons.length; i += 2) {
                                groupedDialectButtons.push(
                                    dialectButtons.slice(i, i + 2)
                                )
                            }

                            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
                            // groupedDialectButtons.push([
                            //   Markup.button.callback("–ù–∞–∑–∞–¥", "back"),
                            // ]);

                            keyboard = Markup.inlineKeyboard(
                                groupedDialectButtons
                            )
                            sendmessage = `${wordDetails}\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–µ–∫—Ç –∏ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞</b>`
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–æ–≤–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                            await sendOrEditMessage(ctx, sendmessage, keyboard)
                        } else {
                            console.log('else')
                            sendmessage = `${wordDetails}\n\n<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ</b>`
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–æ–≤–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                            await sendOrEditMessage(ctx, sendmessage)
                        }

                        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (5), –≥–¥–µ –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å—Å—è –ø–µ—Ä–µ–≤–æ–¥
                        ctx.wizard.selectStep(5)
                    } else {
                        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ–≤–µ.')
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ–≤–µ:', error)
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ.')
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è" (–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
            if (callbackData === 'back') {
                await ctx.scene.enter('dictionary-wizard')
            }

            if (callbackData === 'prev_page') {
                const currentPage = ctx.session.page || 1
                if (currentPage > 1) {
                    const prevPage = currentPage - 1

                    ctx.session.page = prevPage
                    if (ctx.session.selected_language) {
                        await fetchPaginatedWords(ctx, prevPage, 10, ctx.session.selected_language)
                    } else {
                        ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —è–∑—ã–∫, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å. –ü–æ—Ö–æ–∂–µ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.`)
                        await renderSelectLanguageForSuggestTranslate(ctx, true)
                    }
                } else {
                    await ctx.answerCbQuery('–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.')
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚û°Ô∏è" (—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
            if (callbackData === 'next_page') {
                const currentPage = ctx.session.page || 1
                const limit = 10

                const apiUrl = process.env.api_url
                const response = await fetch(
                    `${apiUrl}/vocabulary/paginated?page=${currentPage}&limit=${limit}`,
                    {
                        method: 'GET',
                        headers: {
                            Authorization: `Bearer ${process.env.admintoken}`,
                            'Content-Type': 'application/json',
                        },
                    }
                )
                const data =
                    (await response.json()) as getAllWordsPaginatedResponse

                if (response.ok) {
                    const totalWords = data.totalWords
                    const totalPages = Math.ceil(totalWords / limit)

                    if (currentPage < totalPages) {
                        const nextPage = currentPage + 1
                        ctx.session.page = nextPage
                        if (ctx.session.selected_language) {
                            await fetchPaginatedWords(
                                ctx,
                                nextPage,
                                10,
                                ctx.session.selected_language
                            )
                        } else {
                            ctx.reply(
                                `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —è–∑—ã–∫, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å. –ü–æ—Ö–æ–∂–µ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.`
                            )
                            await renderSelectLanguageForSuggestTranslate(
                                ctx,
                                true
                            )
                        }
                    } else {
                        await ctx.answerCbQuery('–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.')
                    }
                } else {
                    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.')
                }
            }

            await ctx.answerCbQuery()
        }
    } else {
        return next()
    }
})

interface getUserResponse {
    message: string
    is_exists: boolean
    user: TelegramUser
}

// –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º
dictionaryWizard.use(async (ctx, next) => {
    if (ctx.wizard.cursor === 5) {
        if (ctx.message && 'text' in ctx.message) {
            const translation = ctx.message.text
            const wordId = ctx.wizard.state.selectedWordId

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
            if (!translation || !wordId) {
                await ctx.reply(
                    '–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω –∏–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.'
                )
                return
            }

            try {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ API
                const apiUrl = process.env.api_url

                if (ctx.from) {
                    if (ctx.from.id) {
                        const getuser = await fetch(
                            `${apiUrl}/telegram/users/exists/${ctx.from.id}`,
                            {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json',
                                    Authorization: `Bearer ${process.env.admintoken}`,
                                },
                            }
                        )

                        const fetchuserResult =
                            (await getuser.json()) as getUserResponse

                        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
                        const requestBody = {
                            word_id: wordId,
                            translate_language:
                                ctx.wizard.state.language || 'unknown', // –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
                            translate: translation, // –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
                            dialect: ctx.wizard.state.selectedDialect,
                            normalized_text:
                                translation.trim().toLowerCase() || '',
                            telegram_user_id: fetchuserResult.user.id,
                        }

                        const response = await fetch(
                            `${apiUrl}/vocabulary/suggest-translate`,
                            {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    Authorization: `Bearer ${process.env.admintoken}`,
                                },
                                body: JSON.stringify(requestBody),
                            }
                        )

                        if (response.ok) {
                            const infoUserSuccesSuggest = await ctx.reply(
                                `–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${translation}`
                            )
                            console.log(infoUserSuccesSuggest.message_id)
                            console.log(infoUserSuccesSuggest.from?.id)
                            if (infoUserSuccesSuggest.from) {
                                if (infoUserSuccesSuggest.from.id) {
                                    setTimeout(async () => {
                                        if (infoUserSuccesSuggest.from) {
                                            if (infoUserSuccesSuggest.from.id) {
                                                await ctx.telegram.deleteMessage(
                                                    infoUserSuccesSuggest.chat
                                                        .id,
                                                    infoUserSuccesSuggest.message_id
                                                )
                                            }
                                        }
                                    }, 2000) // –£–¥–∞–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                                }
                            }
                        } else {
                            await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞`)
                        }

                        ctx.wizard.state.language = ''

                        // –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                        ctx.scene.enter('dictionary-wizard')
                    } else {
                        // –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É –µ—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω
                        ctx.scene.enter('dictionary-wizard')
                    }
                } else {
                    // –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É –µ—Å–ª–∏ ctx.from –Ω–µ—Ç
                    ctx.scene.enter('dictionary-wizard')
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞:', error)
                await ctx.reply(
                    '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.'
                )
            }
        } else if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
            const callbackData = (ctx.callbackQuery as any).data

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ª–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è _id
            if (
                callbackData.startsWith('select_dialect_for_suggest_translate_')
            ) {
                const selectedDialect: string = callbackData
                    .split('_')
                    .pop()
                    .replace('"', '') // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ª–µ–∫—Ç
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–µ–∫—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                ctx.wizard.state.selectedDialect = selectedDialect

                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–Ω–µ –ª–µ–Ω—å –ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø—ã
                // @ts-ignore
                const message = ctx.update.callback_query.message
                const dialectButtons = dialects.map((dialect) =>
                    Markup.button.callback(
                        `${selectedDialect === dialect.value ? '‚úÖ ' : ''}${dialect.label}`,
                        `select_dialect_for_suggest_translate_"${dialect.value}`
                    )
                )
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
                const groupedDialectButtons: any = []
                for (let i = 0; i < dialectButtons.length; i += 2) {
                    groupedDialectButtons.push(dialectButtons.slice(i, i + 2))
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏–∞–ª–µ–∫—Ç–∞–º–∏
                await sendOrEditMessage(
                    ctx,
                    message.text,
                    Markup.inlineKeyboard([
                        ...groupedDialectButtons,
                        // [Markup.button.callback("–ù–∞–∑–∞–¥", "back")],
                    ])
                )
            }

            if (callbackData === 'back') {
                await renderSelectLanguageForSuggestTranslate(ctx)
            }

            ctx.answerCbQuery()
        } else {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞.')
        }
    } else {
        return next()
    }
})

const dictionaryKeyboard = Markup.inlineKeyboard([
    [Markup.button.callback('–ù–∞–π—Ç–∏ —Å–ª–æ–≤–æ', 'select_language')],
    // [
    //   Markup.button.callback("–†—É—Å—Å–∫–∏–π", "select_russian"),
    //   Markup.button.callback("–ë—É—Ä—è—Ç—Å–∫–∏–π", "select_buryat"),
    // ],
    [Markup.button.callback('–ú–æ–¥–µ—Ä–∞—Ü–∏—è', 'consider_suggested_words')], // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    [Markup.button.callback('–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–æ–≤–æ', 'suggest_word')],
    [Markup.button.callback('–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã', 'suggest_translate')], // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    [Markup.button.callback('–ù–∞–∑–∞–¥', 'home')],
])

const historyKeyboard = Markup.inlineKeyboard([
    [Markup.button.callback('–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', 'delete_history')],
    [Markup.button.callback('–ù–∞–∑–∞–¥', 'back_to_dictionary')],
])

const link = 'https://t.me/bur_live'
const how_to_use_dict =
    'https://telegra.ph/Kak-vospolzovatsya-slovarem-httpstmeburlive-bot-09-08'
const hot_to_vote = 'https://telegra.ph/Kak-progolosovat-za-perevod-09-08'
const how_to_suggest_translate =
    'https://telegra.ph/Kak-dobavit-perevoda-k-slovu-09-08'
// –£–±–∏—Ä–∞–µ–º `ctx.wizard.next()` –∏–∑ `enter`
dictionaryWizard.enter(async (ctx) => {
    sendOrEditMessage(
        ctx,
        `<b>–°–ª–æ–≤–∞—Ä—å</b> \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç\n\n<i><a href='${how_to_use_dict}'>–ö–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–æ–≤–∞—Ä–µ–º?</a>\n<a href='${hot_to_vote}'>–ö–∞–∫ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø–µ—Ä–µ–≤–æ–¥?</a>\n<a href='${link}'>–ö–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–æ–≤–æ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥?</a>\n<a href='${how_to_suggest_translate}'>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∫ —Å–ª–æ–≤—É?</a></i>`,
        dictionaryKeyboard
    )
})

const messageContentSelectRussianForTranslate = `<b>–°–ª–æ–≤–∞—Ä—å ‚Äî –ù–∞–π—Ç–∏ —Å–ª–æ–≤–æ üîé\n\n</b><i>–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ:</i>`
const messageContentSelectBuryatForTranslate = `<b>–°–ª–æ–≤–∞—Ä—å ‚Äî –ù–∞–π—Ç–∏ —Å–ª–æ–≤–æ üîé\n\n</b><i>–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –±—É—Ä—è—Ç—Å–∫–æ–≥–æ:</i>`

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
dictionaryWizard.action('select_russian', async (ctx) => {
    ctx.wizard.state.language = 'russian'
    await sendOrEditMessage(ctx, messageContentSelectRussianForTranslate)
    return ctx.wizard.selectStep(1) // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É 1
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
dictionaryWizard.action('select_buryat', async (ctx) => {
    ctx.wizard.state.language = 'buryat'
    await sendOrEditMessage(ctx, messageContentSelectBuryatForTranslate)
    return ctx.wizard.selectStep(1) // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É 1
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∫ —Å–ª–æ–≤–∞–º
dictionaryWizard.action('suggest_translate', async (ctx) => renderSelectLanguageForSuggestTranslate(ctx))
async function renderSelectLanguageForSuggestTranslate (ctx: MyContext, reply?: boolean) {
    let message = '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å'
    const suggestTranslateKeyboard = Markup.inlineKeyboard([
        [
            Markup.button.callback(
                '–†—É—Å—Å–∫–∏–π',
                'select_russian_for_suggest_translate'
            ),
            Markup.button.callback(
                '–ë—É—Ä—è—Ç—Å–∫–∏–π',
                'select_buryat_for_suggest_translate'
            ),
        ],
    ])
    await sendOrEditMessage(ctx, message, suggestTranslateKeyboard, reply)
    ctx.wizard.selectStep(5)
    // await fetchPaginatedWords(ctx, 1, 10)
}
interface fetchPaginatedWordsResponse {
    message: string
    items: IWordModel[]
    totalItems: number
    currentPage: number
    totalPages: number
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
async function fetchPaginatedWords(
    ctx: MyContext,
    page = 1,
    limit = 10,
    language: "russian" | "buryat",
    reply = false
) {
    try {
        const apiUrl = process.env.api_url
        const response = await fetch(
            `${apiUrl}/vocabulary/confirmed-words?page=${page}&limit=${limit}&language=${language}`,
            {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${process.env.admintoken}`,
                    'Content-Type': 'application/json',
                },
            }
        )
        const data = (await response.json()) as fetchPaginatedWordsResponse

        if (response.ok) {
            const { items, totalItems } = data

            if (totalItems === 0) {
                ctx.answerCbQuery(`–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –Ω–µ—Ç`)
                return
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            const resultMessage = await createResultMessage(
                items,
                totalItems,
                page,
                limit
            )
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∏—Å–ø–æ–ª—å–∑—É—è word._id
            const selectionButtons: any = items.map(
                (word: IWordModel, index: number) =>
                    Markup.button.callback(
                        `${index + 1}`,
                        `select_word_${word._id}`
                    )
            )

            // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–∞ —Ä—è–¥–∞ (–ø–æ 5 –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ä—è–¥)
            const rows: any = []
            for (let i = 0; i < selectionButtons.length; i += 5) {
                rows.push(selectionButtons.slice(i, i + 5))
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
            const paginationButtons = [
                Markup.button.callback('‚¨ÖÔ∏è', 'prev_page'),
                Markup.button.callback('–ù–∞–∑–∞–¥', 'back'),
                Markup.button.callback('‚û°Ô∏è', 'next_page'),
            ]

            const selectionKeyboard = Markup.inlineKeyboard([
                ...rows,
                paginationButtons,
            ])

            ctx.session.page = page

            await sendOrEditMessage(
                ctx,
                resultMessage,
                selectionKeyboard,
                reply
            )
            ctx.wizard.selectStep(4) // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥ 4
        } else {
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.')
        }
    } catch (error) {
        console.error(error)
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ.')
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
// for (let i = 0; i < 10; i++) {
//   dictionaryWizard.action(`select_word_for_translation_${i}`, async (ctx) => {
//     const page = ctx.session.page || 1;
//     const limit = 10;

//     // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
//     const apiUrl = process.env.api_url;
//     const response: any = await fetch(
//       `${apiUrl}/vocabulary/get-words-for-translation?page=${page}&limit=${limit}`,
//       {
//         method: "GET",
//         headers: {
//           Authorization: `Bearer ${process.env.admintoken}`,
//           "Content-Type": "application/json",
//         },
//       }
//     );
//     const data = await response.json();

//     if (response.ok) {
//       const selectedWord = data.words[i]; // –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É

//       // –°–æ—Ö—Ä–∞–Ω—è–µ–º _id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–µ—Å—Å–∏–∏
//       ctx.wizard.state.selectedWordId = selectedWord._id;

//       // –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
//       await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞: ${selectedWord.text}`);

//       // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
//       ctx.wizard.selectStep(5);

//       // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//       dictionaryWizard.on("text", async (ctx) => {
//         const translationInput = ctx.message?.text;
//         if (!translationInput) {
//           await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.");
//           return;
//         }

//         // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
//         const requestBody = {
//           word_id: selectedWord._id,
//           translation: translationInput,
//           telegram_user_id: ctx.from?.id,
//         };

//         const response = await fetch(`${apiUrl}/vocabulary/suggest-translate`, {
//           method: "POST",
//           headers: {
//             "Content-Type": "application/json",
//             Authorization: `Bearer ${process.env.admintoken}`,
//           },
//           body: JSON.stringify(requestBody),
//         });

//         if (response.ok) {
//           await ctx.reply(
//             `–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ "${selectedWord.text}" —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω: ${translationInput}`
//           );
//         } else {
//           await ctx.reply(
//             `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞`
//           );
//         }

//         // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ü–µ–Ω–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
//         return ctx.scene.enter("dictionary-wizard");
//       });
//     } else {
//       await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
//     }
//   });
// }

const suggesWordHandlerMessageContent =
    '<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–æ–≤–∞ ‚Äî –í—ã–±–æ—Ä —è–∑—ã–∫–∞ ‚úçÔ∏è</b>\n\n–£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–æ/—Å–ª–æ–≤–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞—à–∏–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º'
const suggesWordHandlerSelectedLanguageBuryat =
    '<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–æ–≤–∞ ‚Äî –í—ã–±–æ—Ä –¥–∏–∞–ª–µ–∫—Ç–∞ ‚úçÔ∏è</b>\n\n–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ª–µ–∫—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞—à–∏–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º'

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ª–æ–≤–∞
dictionaryWizard.action('suggest_word', async (ctx) => {
    const languageSelectionKeyboard = Markup.inlineKeyboard([
        [
            Markup.button.callback('–†—É—Å—Å–∫–∏–π', 'suggest_russian'),
            Markup.button.callback('–ë—É—Ä—è—Ç—Å–∫–∏–π', 'suggest_buryat'),
        ],
        [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')],
    ])

    await sendOrEditMessage(
        ctx,
        suggesWordHandlerMessageContent,
        languageSelectionKeyboard
    )
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
dictionaryWizard.action('suggest_russian', async (ctx) => {
    ctx.wizard.state.language = 'russian'
    await sendOrEditMessage(
        ctx,
        '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ:'
    )
    return ctx.wizard.selectStep(2) // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É 2
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ª–æ–≤–∞ –Ω–∞ –±—É—Ä—è—Ç—Å–∫–æ–º —è–∑—ã–∫–µ —Å –¥–∏–∞–ª–µ–∫—Ç–∞–º–∏
dictionaryWizard.action('suggest_buryat', async (ctx) => {
    ctx.wizard.state.language = 'buryat'

    // –ï—Å–ª–∏ –¥–∏–∞–ª–µ–∫—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const selectedDialect =
        ctx.wizard.state.selectedDialect || dialects[0].value

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏–∞–ª–µ–∫—Ç–∞–º–∏, –≥–¥–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–º–µ—á–µ–Ω –∑–Ω–∞—á–∫–æ–º ‚úÖ
    const dialectButtons = dialects.map((dialect) =>
        Markup.button.callback(
            `${selectedDialect === dialect.value ? '‚úÖ ' : ''}${dialect.label}`,
            `select_dialect_for_suggest_translate_${dialect.value}`
        )
    )

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫–µ
    const groupedDialectButtons: any = []
    for (let i = 0; i < dialectButtons.length; i += 2) {
        groupedDialectButtons.push(dialectButtons.slice(i, i + 2))
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ" –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    groupedDialectButtons.push([
        Markup.button.callback('–î–∞–ª–µ–µ', 'continue_with_dialect'),
    ])

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏–∞–ª–µ–∫—Ç–∞–º–∏
    await sendOrEditMessage(
        ctx,
        suggesWordHandlerSelectedLanguageBuryat,
        Markup.inlineKeyboard(groupedDialectButtons)
    )
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ª–µ–∫—Ç–∞
dialects.forEach((dialect) => {
    dictionaryWizard.action(
        `select_dialect_for_suggest_translate_${dialect.value}`,
        async (ctx) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ª–µ–∫—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            ctx.wizard.state.selectedDialect = dialect.value

            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            const selectedDialect = ctx.wizard.state.selectedDialect

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∏–∞–ª–µ–∫—Ç–∞–º–∏, –≥–¥–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–º–µ—á–µ–Ω –∑–Ω–∞—á–∫–æ–º ‚úÖ
            const dialectButtons = dialects.map((dialect) =>
                Markup.button.callback(
                    `${selectedDialect === dialect.value ? '‚úÖ ' : ''}${dialect.label}`,
                    `select_dialect_for_suggest_translate_${dialect.value}`
                )
            )

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫–µ
            const groupedDialectButtons: any = []
            for (let i = 0; i < dialectButtons.length; i += 2) {
                groupedDialectButtons.push(dialectButtons.slice(i, i + 2))
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ" –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            groupedDialectButtons.push([
                Markup.button.callback('–î–∞–ª–µ–µ', 'continue_with_dialect'),
            ])

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await sendOrEditMessage(
                ctx,
                suggesWordHandlerSelectedLanguageBuryat,
                Markup.inlineKeyboard(groupedDialectButtons)
            )
        }
    )
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ª–µ–∫—Ç–∞
dictionaryWizard.action('continue_with_dialect', async (ctx) => {
    const selectedDialect =
        ctx.wizard.state.selectedDialect || dialects[0].value

    let message = `<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–æ–≤–∞ ‚Äî –í–≤–æ–¥ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã ‚úçÔ∏è</b>\n\n`

    message += `–í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫: <b>–ë—É—Ä—è—Ç—Å–∫–∏–π</b>\n`
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–µ –∑–Ω–∞—é"
    message +=
        selectedDialect === 'unknown'
            ? '<b>–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –¥–∏–∞–ª–µ–∫—Ç</b>'
            : `–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏–∞–ª–µ–∫—Ç: <b>${
                  dialects.find((d) => d.value === selectedDialect)?.label
              } </b>\n\n<i>–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É:</i>`

    // const actionKeyboard = Markup.inlineKeyboard([
    // Markup.button.callback("–ù–∞–∑–∞–¥", "suggest_buryat"),
    // ]);

    await sendOrEditMessage(ctx, message)

    return ctx.wizard.selectStep(2) // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞
})

dictionaryWizard.action(
    'select_language',
    async (ctx) => await render_select_language_section(ctx)
)
async function render_select_language_section(ctx: MyContext, reply?: boolean) {
    try {
        let message = `<b>–°–ª–æ–≤–∞—Ä—å ‚Äî –ù–∞–π—Ç–∏ —Å–ª–æ–≤–æ üîé\n\n</b>`
        message += `<i>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ</i>`
        const keyboard = Markup.inlineKeyboard([
            [
                Markup.button.callback('–†—É—Å—Å–∫–∏–π', 'select_russian'),
                Markup.button.callback('–ë—É—Ä—è—Ç—Å–∫–∏–π', 'select_buryat'),
            ],
            [Markup.button.callback('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞', 'my_history')],
            [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')],
        ])
        await sendOrEditMessage(ctx, message, keyboard, reply)
    } catch (error) {
        console.log(error)
    }
}

dictionaryWizard.action('my_history', async (ctx) => {
    const message = `<b>–°–ª–æ–≤–∞—Ä—å ‚Äî –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ üîé</b>\n\n`
    // ${await getHistory(ctx.from.id)}
    ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [Markup.button.callback('–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', 'delete_history')],
                [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')],
            ],
        },
    })
    ctx.wizard.selectStep(4)
    ctx.answerCbQuery()
})

dictionaryWizard.action('home', async (ctx) => {
    ctx.scene.enter('home')
})

dictionaryWizard.action('back', async (ctx) => {
    ctx.scene.enter('dictionary-wizard')
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–¥–µ—Ä–∞—Ü–∏—è"
dictionaryWizard.action('consider_suggested_words', async (ctx: MyContext) => {
    const message = `<b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç`

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const suggest_words_keyboard = Markup.inlineKeyboard([
        // –ö–∞–∂–¥—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ - —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        [Markup.button.callback('–†—É—Å—Å–∫–∏–π', 'words-consider-russian')],
        [Markup.button.callback('–ë—É—Ä—è—Ç—Å–∫–∏–π', 'words-consider-buryat')],
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        [Markup.button.callback('–ù–∞–∑–∞–¥', 'skip_word')],
    ])

    try {
        if (ctx.callbackQuery && ctx.callbackQuery.message) {
            await ctx.editMessageText(message, {
                parse_mode: 'HTML',
                reply_markup: suggest_words_keyboard.reply_markup, // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ reply_markup
            })
            // –í–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callbackQuery, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
            await ctx.answerCbQuery()
        } else {
            // –§–æ–ª–ª–±—ç–∫, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç callbackQuery (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è action)
            await ctx.reply(message, {
                parse_mode: 'HTML',
                reply_markup: suggest_words_keyboard.reply_markup,
            })
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', error)
        // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ctx
            .reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            .catch((err) =>
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', err)
            )
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ü–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –µ–µ –ø—Ä–µ—Ä–≤–∞—Ç—å
        await ctx.scene?.leave()
    }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
for (let i = 0; i < 10; i++) {
    dictionaryWizard.action(`select_word_${i}`, async (ctx) => {
        const page = ctx.session.page || 1
        const limit = 10

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const apiUrl = process.env.api_url
        const response = await fetch(
            `${apiUrl}/vocabulary/approval?page=${page}&limit=${limit}`,
            {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${process.env.admintoken}`,
                    'Content-Type': 'application/json',
                },
            }
        )
        const data: any = await response.json()

        if (response.ok) {
            const selectedWord = data.words[i] // –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º _id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–µ—Å—Å–∏–∏
            ctx.wizard.state.selectedWordId = selectedWord._id

            // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
            await ctx.editMessageText(
                `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–æ–≤–æ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è: ${selectedWord.text} (${selectedWord.language})`
            )

            const actionKeyboard = Markup.inlineKeyboard([
                Markup.button.callback('–ü—Ä–∏–Ω—è—Ç—å', 'approve_word'),
                Markup.button.callback('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', 'reject_word'),
                // –û—à–∏–±—Å—è :)
                Markup.button.callback('–ù–∞–∑–∞–¥', 'skip_word'),
            ])

            await ctx.reply(
                '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º?',
                actionKeyboard
            )
        } else {
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.')
        }
    })
}

dictionaryWizard.action('skip_word', async (ctx) => {
    const currentPage = ctx.session.page ? ctx.session.page : 1
    await fetchWordsOnApproval(ctx, currentPage)
})
dictionaryWizard.action('approve_word', async (ctx) => {
    const wordId = ctx.wizard.state.selectedWordId
    const userId = ctx.from?.id

    if (!wordId || !userId) {
        await ctx.reply('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Å–ª–æ–≤–∞.')
        return
    }

    try {
        const apiUrl = process.env.api_url
        const response = await fetch(
            `${apiUrl}/vocabulary/accept-suggested-word`,
            {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${process.env.admintoken}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    suggestedWordId: wordId,
                    telegram_user_id: userId,
                }),
            }
        )

        if (response.ok) {
            await ctx.editMessageText(
                '–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å.'
            )
            const page = ctx.session.page || 1 // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º page –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
            const limit = 10 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

            await fetchWordsOnApproval(ctx, page, limit, true)
        } else {
            console.log(await response.json())
            await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–ª–æ–≤–∞`)
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–ª–æ–≤–∞:', error)
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–ª–æ–≤–∞.')
    }

    return ctx.wizard.selectStep(2) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
})
dictionaryWizard.action('reject_word', async (ctx) => {
    const wordId = ctx.wizard.state.selectedWordId // ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    const userId = ctx.from?.id // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º

    if (!wordId || !userId) {
        await ctx.reply('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞.')
        return ctx.wizard.selectStep(2) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    }

    try {
        const apiUrl = process.env.api_url // URL –≤–∞—à–µ–≥–æ API
        const response = await fetch(
            `${apiUrl}/vocabulary/decline-suggested-word`,
            {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${process.env.admintoken}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    suggestedWordId: wordId, // ID –æ—Ç–∫–ª–æ–Ω—è–µ–º–æ–≥–æ —Å–ª–æ–≤–∞
                    telegram_user_id: userId, // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                }),
            }
        )

        if (response.ok) {
            await ctx.editMessageText(
                `–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.`
            )
            const page = ctx.session.page || 1 // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º page –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
            const limit = 10 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

            await fetchWordsOnApproval(ctx, page, limit, true)
        } else {
            await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞`)
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞:', error)
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.')
    }

    return ctx.wizard.selectStep(2) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è" (–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
dictionaryWizard.action('prev_page', async (ctx) => {
    try {
        // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –∫–∞–∫ 1
        const currentPage = ctx.session.page ? ctx.session.page : 1

        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî 1
        const prevPage = Math.max(1, currentPage - 1)

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–µ—Å—Å–∏–∏
        ctx.session.page = prevPage

        if (currentPage === 1) {
            ctx.answerCbQuery()
            return false
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        return await fetchWordsOnApproval(ctx, prevPage, 10)
    } catch (error) {
        return ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ action`)
    }
})

dictionaryWizard.action('next_page', async (ctx) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–∑ —Å–µ—Å—Å–∏–∏
        const currentPage = ctx.session.page ? ctx.session.page : 1
        const limit = 10

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        const apiUrl = process.env.api_url
        const response = await fetch(
            `${apiUrl}/vocabulary/approval?page=${currentPage}&limit=${limit}`,
            {
                method: 'GET',
                headers: {
                    Authorization: `Bearer ${process.env.admintoken}`,
                    'Content-Type': 'application/json',
                },
            }
        )
        const data: any = await response.json()

        if (response.ok) {
            const totalWords = data.total_count // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
            const totalPages = Math.ceil(totalWords / limit) // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if (currentPage >= totalPages) {
                // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–Ω –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                await ctx.answerCbQuery('–í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.')
                return false
            }

            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é
            const nextPage = currentPage + 1
            ctx.session.page = nextPage

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            return await fetchWordsOnApproval(ctx, nextPage, limit)
        } else {
            return await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.')
        }
    } catch (error) {
        return ctx.answerCbQuery(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞`)
    }
})

// async function renderKeyboardDialects(_ctx: MyContext, selectedDialect: string) {
//   try {
//     // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏–∞–ª–µ–∫—Ç–∞–º–∏, –≥–¥–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–º–µ—á–µ–Ω –∑–Ω–∞—á–∫–æ–º ‚úÖ
//     const dialectButtons = dialects.map((dialect) => [
//       Markup.button.callback(
//         `${selectedDialect === dialect.value ? "‚úÖ " : ""}${dialect.label}`,
//         `select_dialect_for_suggest_translate_${dialect.value}`
//       ),
//     ]);

//     return dialectButtons;
//   } catch (error) {
//     console.log(error);
//     return [];
//   }
// }

export default dictionaryWizard
