import { Scenes, Composer, Markup } from 'telegraf'
import { MyContext } from './types/MyContext'
import sendOrEditMessage from './utils/sendOrEditMessage'
import { fetchUser } from './utils/fetchUser'
import { error } from 'console'
import { createSubscribeUrl } from './utils/createSubscribeUrl'
import { savePhoneNumber } from './utils/savePhoneNumber'

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
const subscribeButtons = Markup.inlineKeyboard([
    [Markup.button.callback('1 –º–µ—Å—è—Ü / 399 —Ä—É–±', 'subscribe_1_month')],
    [Markup.button.callback('3 –º–µ—Å—è—Ü–∞ / 999 —Ä—É–±', 'subcribe_3_month')],
    [Markup.button.callback('12 –º–µ—Å—è—Ü–µ–≤ / 3599 —Ä—É–±', 'subscribe_1_year')],
    [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')],
])

// –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è Wizard-—Å—Ü–µ–Ω—ã
interface WizardState {
    language?: string
    suggestion?: boolean
    selectedWordId?: string
    selectedDialect?: string
    normalized_text?: string
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const requestPhoneNumber = async (ctx: MyContext) => {
    const callbackQuery = (ctx.update as any).callback_query
    const messageId = callbackQuery?.message?.message_id
    if (messageId) {
        await ctx.deleteMessage(messageId)
    }

    await ctx.reply(
        '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.',
        Markup.keyboard([
            [Markup.button.contactRequest('üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')],
        ])
            .oneTime() // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            .resize() // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    )
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–∞ 2
const stepHandler = new Composer<MyContext>()
stepHandler.action('back', async (ctx) => {
    // Markup.removeKeyboard()
    // ctx.reply('–ø—Ä–∏–≤–µ—Ç', { reply_markup: { remove_keyboard: true } })
    ctx.scene.enter('home')
})
// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
const createSubscriptionMessage = async (
    ctx: MyContext,
    userId: string,
    subscriptionType: 'monthly' | 'quarterly' | 'annual'
) => {
    try {
        const request = await createSubscribeUrl(userId, subscriptionType)
        let rusType: string = ``

        if (subscriptionType === 'monthly') {
            rusType = '1 –º–µ—Å—è—Ü'
        } else if (subscriptionType === 'quarterly') {
            rusType = '3 –º–µ—Å—è—Ü–∞'
        } else if (subscriptionType === 'annual') {
            rusType = '1 –≥–æ–¥'
        }

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const message = `üíé <b>–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø</b>\n\n–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${rusType}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${request.amount} ‚ÇΩ\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å"`

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await sendOrEditMessage(
            ctx,
            message,
            Markup.inlineKeyboard([
                [Markup.button.url('–û–ø–ª–∞—Ç–∏—Ç—å', request.confirmation_url)],
                [Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]
            ])
        )

        // –û—Ç–≤–µ—Ç –Ω–∞ callback
        await ctx.answerCbQuery()
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error)
    }
}


// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
const handleSubscribeAction = async (ctx: MyContext) => {
    try {
        const userId = ctx.from?.id
        if (!userId) return

        const userStatus = await fetchUser(userId)
        console.log(userStatus)
        
        if (userStatus.is_exists && !userStatus.user.phone) {
            await requestPhoneNumber(ctx)
        } else {
            // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            const subscriptionMap: Record<string, 'monthly' | 'quarterly' | 'annual'> = {
                'subscribe_1_month': 'monthly',
                'subcribe_3_month': 'quarterly',
                'subscribe_1_year': 'annual',
            }

            const data: string = ctx.update.callback_query.data
            const subscriptionType = subscriptionMap[data]

            if (subscriptionType) {
                await createSubscriptionMessage(ctx, userStatus.user._id, subscriptionType)
                return
            }

            await ctx.answerCbQuery()
        }
    } catch (error) {
        const message = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å @frntdev`
        await sendOrEditMessage(
            ctx,
            message,
            Markup.inlineKeyboard([[Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]])
        )
    }
}
// –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º callback –¥–∞–Ω–Ω—ã–º
stepHandler.action(
    ['subscribe_1_month', 'subcribe_3_month', 'subscribe_1_year'],
    handleSubscribeAction
)
stepHandler.action(/^.*$/, async (ctx: MyContext) => {
    ctx.wizard.selectStep(2)
    ctx.answerCbQuery()
})
stepHandler.on('message', async (ctx) => {
    await subscribeGreeting(ctx)
})
// –°—Ü–µ–Ω–∞ "–ü–æ–¥–ø–∏—Å–∫–∞"
const subscribeWizard = new Scenes.WizardScene(
    'subscribe-wizard',
    stepHandler,

    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—ã–≤–æ–¥ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async (ctx: MyContext) => {
        if (ctx.updateType === 'message') {
            await subscribeGreeting(ctx)
        }
    },

    // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    async (ctx) => {
        await requestPhoneNumber(ctx)
        if (ctx.updateType === 'callback_query') {
        }
    }
)

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
async function subscribeGreeting(ctx: MyContext, reply?: boolean) {
    try {
        const userId = ctx.from?.id
        if (!userId) return

        const response = await fetchUser(userId)
        const isActive = response.user.subscription.isActive

        // const subscribeMessage = `<b>üíé –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø</b>\n\n–°—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—É—Ä—è—Ç—Å–∫–∏–π —è–∑—ã–∫.\n\n<b>–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –ü—Ä–µ–º–∏—É–º?</b>\n\n<strong><i>+ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</i></strong>\n<strong><i>+ –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å</i></strong>\n<strong><i>+ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã</i></strong>\n<strong><i>+ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –Ω–∞–≥—Ä–∞–¥—ã</i></strong>\n<strong><i>+ –î–æ—Å—Ç—É–ø –∫ —Å–ª–æ–≤–∞—Ä—é</i></strong>\n<strong><i>+ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</i></strong>`
        let subscribeMessage = `<b>üíé –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø</b>\n\n`
        if (!isActive) {
            subscribeMessage += `–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—É—Ä—è—Ç—Å–∫–∏–π —è–∑—ã–∫.`
            subscribeMessage += `\n\n<b>–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –ü—Ä–µ–º–∏—É–º?</b>\n\n<strong><i>+ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</i></strong>\n<strong><i>+ –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å</i></strong>\n<strong><i>+ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã</i></strong>\n<strong><i>+ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –Ω–∞–≥—Ä–∞–¥—ã</i></strong>\n<strong><i>+ –î–æ—Å—Ç—É–ø –∫ —Å–ª–æ–≤–∞—Ä—é</i></strong>\n<strong><i>+ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</i></strong>`
        } else {
            if (
                response.user.subscription.startDate !== null &&
                response.user.subscription.endDate !== null
            ) {
                const startDate = new Date(response.user.subscription.startDate)
                const endDate = new Date(response.user.subscription.endDate)
                subscribeMessage += `–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å <b><i>${startDate.toLocaleDateString('ru-Ru')}</i></b>`
                subscribeMessage += `\n–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç <b><i>${endDate.toLocaleDateString('ru-Ru')}</i></b>`
                subscribeMessage += `\n\n<b>–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –ü—Ä–µ–º–∏—É–º?</b>\n\n<strong><i>+ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</i></strong>\n<strong><i>+ –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å</i></strong>\n<strong><i>+ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã</i></strong>\n<strong><i>+ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –Ω–∞–≥—Ä–∞–¥—ã</i></strong>\n<strong><i>+ –î–æ—Å—Ç—É–ø –∫ —Å–ª–æ–≤–∞—Ä—é</i></strong>\n<strong><i>+ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</i></strong>`
            } else {
                ctx.telegram.sendMessage(
                    1272270574,
                    `–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}, –Ω–æ –Ω–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –Ω–∞—á–∞–ª–∞`
                )
                throw error
            }
        }
        // throw error
        await sendOrEditMessage(ctx, subscribeMessage, subscribeButtons, reply)
    } catch (error) {
        const message = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å @frntdev`
        await sendOrEditMessage(
            ctx,
            message,
            Markup.inlineKeyboard([[Markup.button.callback('–ù–∞–∑–∞–¥', 'back')]]),
            reply
        )
        // ctx.scene.enter("home")
    }
}

subscribeWizard.on("contact", async (ctx: any) => {
    if (ctx.update) {
        if (ctx.update.message.contact) {
            const contact: {
                phone_number: string;
                first_name: string;
                user_id: number
            } = ctx.update.message.contact

            const request = await savePhoneNumber(contact.user_id, contact.phone_number)
            ctx.reply(request.message, {
                reply_markup: { remove_keyboard: true },
            })
            await subscribeGreeting(ctx, true)
        }
    }
})

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É "–ü–æ–¥–ø–∏—Å–∫–∞"
subscribeWizard.enter(async (ctx: MyContext) => {
    await subscribeGreeting(ctx)
})

export default subscribeWizard
